/*
Author: Valeria Zúñiga Mendoza
Date: 26/05/2024
Project: E1 Implementation of Lexical Analysis (deterministic finite automaton (DFA))

Purpose of the project: 
Check is numbers belong to the language specified by the DFA.
Where it accepts all the posible combinations of 0, 1, 2, 
that don't contain 1011, 1012, 1101, 1122.
*/

% Define the initial state
initial_state(a).

% Define the accepting states
accept(b).
accept(c).
accept(d).
accept(e).
accept(g).
accept(h).
accept(j).

% Define the transitions 
move(a, b, 0).
move(a, b, 2).
move(a, c, 1).

move(b, b, 0).
move(b, b, 2).
move(b, c, 1).

move(c, d, 0).
move(c, g, 1).
move(c, b, 2).

move(d, e, 1).
move(d, b, 0).
move(d, b, 2).

move(e, f, 1).
move(e, f, 2).
move(e, d, 0).

move(g, h, 0).
move(g, g, 1).
move(g, j, 2).

move(h, i, 1).
move(h, b, 0).
move(h, b, 2).

move(j, k, 2).
move(j, b, 0).
move(j, c, 1).

% Base case: When the list is empty the final state is reached
go_through_Digits([], FinalState, FinalState). 

% Recursive function to go through the list and get the final state
go_through_Digits([Digit|RestofDigits], State1, FinalState) :-
    (move(State1, NextState, Digit) -> % Check if the move predicate succeeds
        NextState = NextState; % If it succeeds, set NextState 
        NextState = State1), % If there is no transition, keep NextState the same as State1
    go_through_Digits(RestofDigits, NextState, FinalState). % Recursive function to apply to all the digits.

% Verify if the list of digits leads to an accepting state
check(DigitsList) :-
    initial_state(StartState), % Get the first initial state: a
    go_through_Digits(DigitsList, StartState, FinalState), % Call the function to go through the list and get the final state
    (accept(FinalState) -> 
        writeln('yes'); % If the final state is an accepting state
        writeln('no') % If the final state is not an accepting state
    ).

% Examples:
% ?- check([0,0,1,1,2,2]).
% no

% ?- check([0,0,1,1,2,1]).
% yes

% others: 01010101 -> yes 011 -> yes 20120 -> yes 201112102 -> yes 001101 -> no 112210 -> no 011011 -> no 111012 -> no